# run function over
cor_vec <- vector()
for(i in 1:length(subs[,1])){
agg <- rr_agg(self = subs[i,2], tar = subs[i,3], groups = subs[i,1])
cor_vec <- c(cor_vec,agg)
}
# Create plotting data frame
consensus <- rr_df %>% select(group, subject, target)
consensus$cor_vec <- cor_vec
consensus_df <<- consensus
}
rr_agg_all(subs)
View(consensus_df)
View(consensus_df)
rr_df_maker <- function(fsl_zstats, subs_csv){
raw_zstats <<- read.table(fsl_zstats, quote="\"", comment.char="",skip = 3)
subs <<- read.csv(subs_csv)
rr_df <<- cbind(subs, raw_zstats)
rr_noself <<- rr_df
for(i in 1:length(rr_noself$subject)){
if(rr_noself[i,2] == rr_noself[i,3]){
rr_noself[i,] <-c(rr_noself[i,1], rr_noself[i,2], rr_noself[i,3],rep(NA, length(rr_noself[1,])-3))
}
}
rr_noself_noNA <<- rr_df %>% filter(subject != target)
rr_selfonly <<- rr_df %>% filter(subject == target)
}
rr_agg <- function(self, tar, groups, cor_meth ="spearman"){
s <- rr_selfonly %>%
filter(subject== self, target == self, group == groups) %>%
select(-group, -subject, -target) %>%
t
temp <- rr_noself_noNA %>%
filter(subject != self, target == tar, group == groups)  %>%
select(-group, -subject, -target)
agg_values <- apply(temp, 2, mean, na.rm=TRUE)
cv <- cor(s[,1],agg_values, method = cor_meth)
return(cv)
}
rr_agg_all <- function(subs_df, cor_meth = "spearman"){
subs <- subs_df
# run function over
cor_vec <- vector()
for(i in 1:length(subs[,1])){
agg <- rr_agg(self = subs[i,2], tar = subs[i,3], groups = subs[i,1])
cor_vec <- c(cor_vec,agg)
}
# Create plotting data frame
consensus <- rr_df %>% select(group, subject, target)
consensus$cor_vec <- cor_vec
consensus_df <<- consensus
}
x= "C:/Users/rober/Documents/neurodeb/shared/replication_analysis/replication_analysis/self_output2.txt"
y = "C:/Users/rober/Documents/neurodeb/shared/replication_analysis/replication_analysis//replication.csv"
rr_df_maker(x,y)
rr_agg_all(subs)
View(consensus_df)
# Summarize for plotting
consensus_df$condition <- ifelse(merged$subject == merged$target, "Correct", "Incorrect")
# Summarize for plotting
consensus_df$condition <- ifelse(rr_df$subject == rr_df$target, "Correct", "Incorrect")
consensus_df$condition <- factor(consensus_df$condition, levels = c("Correct", "Incorrect"))
consensus_df$correct_corr <- ifelse(consensus_df$condition == "Correct",cor_vec,NA)
consensus_df$incorrect_corr <- ifelse(consensus_df$condition == "Correct",NA,cor_vec)
View(consensus_df)
rr_agg_all <- function(subs_df, cor_meth = "spearman"){
subs <- subs_df
# run function over
cor_vec <- vector()
for(i in 1:length(subs[,1])){
agg <- rr_agg(self = subs[i,2], tar = subs[i,3], groups = subs[i,1])
cor_vec <- c(cor_vec,agg)
}
# Create plotting data frame
consensus <- rr_df %>% select(group, subject, target)
consensus$correlation <- cor_vec
consensus_df <<- consensus
}
rr_df_maker <- function(fsl_zstats, subs_csv){
raw_zstats <<- read.table(fsl_zstats, quote="\"", comment.char="",skip = 3)
subs <<- read.csv(subs_csv)
rr_df <<- cbind(subs, raw_zstats)
rr_noself <<- rr_df
for(i in 1:length(rr_noself$subject)){
if(rr_noself[i,2] == rr_noself[i,3]){
rr_noself[i,] <-c(rr_noself[i,1], rr_noself[i,2], rr_noself[i,3],rep(NA, length(rr_noself[1,])-3))
}
}
rr_noself_noNA <<- rr_df %>% filter(subject != target)
rr_selfonly <<- rr_df %>% filter(subject == target)
}
rr_agg <- function(self, tar, groups, cor_meth ="spearman"){
s <- rr_selfonly %>%
filter(subject== self, target == self, group == groups) %>%
select(-group, -subject, -target) %>%
t
temp <- rr_noself_noNA %>%
filter(subject != self, target == tar, group == groups)  %>%
select(-group, -subject, -target)
agg_values <- apply(temp, 2, mean, na.rm=TRUE)
cv <- cor(s[,1],agg_values, method = cor_meth)
return(cv)
}
rr_agg_all <- function(subs_df, cor_meth = "spearman"){
subs <- subs_df
# run function over
cor_vec <- vector()
for(i in 1:length(subs[,1])){
agg <- rr_agg(self = subs[i,2], tar = subs[i,3], groups = subs[i,1])
cor_vec <- c(cor_vec,agg)
}
# Create plotting data frame
consensus <- rr_df %>% select(group, subject, target)
consensus$correlation <- cor_vec
consensus_df <<- consensus
}
x= "C:/Users/rober/Documents/neurodeb/shared/replication_analysis/replication_analysis/self_output2.txt"
y = "C:/Users/rober/Documents/neurodeb/shared/replication_analysis/replication_analysis//replication.csv"
rr_df_maker(x,y)
rr_agg_all(subs)
# Summarize for plotting
consensus_df$condition <- ifelse(rr_df$subject == rr_df$target, "Correct", "Incorrect")
consensus_df$condition <- factor(consensus_df$condition, levels = c("Correct", "Incorrect"))
consensus_df$correct_corr <- ifelse(consensus_df$condition == "Correct",consensus_df$cor_,NA)
consensus_df$correct_corr <- ifelse(consensus_df$condition == "Correct",consensus_df$correlation,NA)
consensus_df$incorrect_corr <- ifelse(consensus_df$condition == "Correct",NA,consensus_df$correlation)
consensus_df$subject <- factor(consensus_df$subject, levels=levels(reorder(consensus_df$subject, -consensus_df$correlation)))
View(consensus_df)
# Summarize for plotting
consensus_df$condition <- ifelse(rr_df$subject == rr_df$target, "congruent", "incongruent")
consensus_df$condition <- factor(consensus_df$condition, levels = c("congruent", "incongruent"))
consensus_df$correct_corr <- ifelse(consensus_df$condition == "congruent",consensus_df$correlation,NA)
consensus_df$incorrect_corr <- ifelse(consensus_df$condition == "congruent",NA,consensus_df$correlation)
consensus_df$subject <- factor(consensus_df$subject, levels=levels(reorder(consensus_df$subject, -consensus_df$correlation)))
View(consensus_df)
rr_agg_all <- function(subs_df, cor_meth = "spearman"){
subs <- subs_df
# run function over
cor_vec <- vector()
for(i in 1:length(subs[,1])){
agg <- rr_agg(self = subs[i,2], tar = subs[i,3], groups = subs[i,1])
cor_vec <- c(cor_vec,agg)
}
consensus <- rr_df %>% select(group, subject, target)
consensus$correlation <- cor_vec
consensus$condition <- ifelse(rr_df$subject == rr_df$target, "congruent", "incongruent")
consensus$condition <- factor(consensus$condition, levels = c("congruent", "incongruent"))
consensus$congruent_corr <- ifelse(consensus$condition == "congruent",consensus$correlation,NA)
consensus$incongruent_corr <- ifelse(consensus$condition == "congruent",NA,consensus$correlation)
consensus$subject <- factor(consensus$subject, levels=levels(reorder(consensus$subject, -consensus$correlation)))
consensus_df <<- consensus
}
x= "C:/Users/rober/Documents/neurodeb/shared/replication_analysis/replication_analysis/self_output2.txt"
y = "C:/Users/rober/Documents/neurodeb/shared/replication_analysis/replication_analysis//replication.csv"
rr_df_maker(x,y)
rr_agg_all(subs)
# Summarize for plotting
consensus_df$condition <- ifelse(rr_df$subject == rr_df$target, "congruent", "incongruent")
consensus_df$condition <- factor(consensus_df$condition, levels = c("congruent", "incongruent"))
consensus_df$congruent_corr <- ifelse(consensus_df$condition == "congruent",consensus_df$correlation,NA)
consensus_df$incongruent_corr <- ifelse(consensus_df$condition == "congruent",NA,consensus_df$correlation)
consensus_df$subject <- factor(consensus_df$subject, levels=levels(reorder(consensus_df$subject, -consensus_df$correlation)))
rr_agg_all <- function(subs_df, cor_meth = "spearman"){
subs <- subs_df
# run function over
cor_vec <- vector()
for(i in 1:length(subs[,1])){
agg <- rr_agg(self = subs[i,2], tar = subs[i,3], groups = subs[i,1])
cor_vec <- c(cor_vec,agg)
}
consensus <- rr_df %>% select(group, subject, target)
consensus$correlation <- cor_vec
consensus$condition <- ifelse(rr_df$subject == rr_df$target, "congruent", "incongruent")
consensus$condition <- factor(consensus$condition, levels = c("congruent", "incongruent"))
consensus$congruent_corr <- ifelse(consensus$condition == "congruent",consensus$correlation,NA)
consensus$incongruent_corr <- ifelse(consensus$condition == "congruent",NA,consensus$correlation)
consensus$subject <- factor(consensus$subject, levels=levels(reorder(consensus$subject, -consensus$correlation)))
consensus_df <<- consensus
}
rr_agg <- function(self, tar, groups, cor_meth ="spearman"){
s <- rr_selfonly %>%
filter(subject== self, target == self, group == groups) %>%
select(-group, -subject, -target) %>%
t
temp <- rr_noself_noNA %>%
filter(subject != self, target == tar, group == groups)  %>%
select(-group, -subject, -target)
agg_values <- apply(temp, 2, mean, na.rm=TRUE)
cv <- cor(s[,1],agg_values, method = cor_meth)
return(cv)
}
rr_df_maker <- function(fsl_zstats, subs_csv){
raw_zstats <<- read.table(fsl_zstats, quote="\"", comment.char="",skip = 3)
subs <<- read.csv(subs_csv)
rr_df <<- cbind(subs, raw_zstats)
rr_noself <<- rr_df
for(i in 1:length(rr_noself$subject)){
if(rr_noself[i,2] == rr_noself[i,3]){
rr_noself[i,] <-c(rr_noself[i,1], rr_noself[i,2], rr_noself[i,3],rep(NA, length(rr_noself[1,])-3))
}
}
rr_noself_noNA <<- rr_df %>% filter(subject != target)
rr_selfonly <<- rr_df %>% filter(subject == target)
}
x= "C:/Users/rober/Documents/neurodeb/shared/replication_analysis/replication_analysis/self_output2.txt"
y = "C:/Users/rober/Documents/neurodeb/shared/replication_analysis/replication_analysis//replication.csv"
rr_df_maker(x,y)
rr_agg_all(subs)
View(consensus_df)
std_error <- function (x, na.rm = FALSE)
{
if (na.rm)
x <- x[!is.na(x)]
sd(x)/sqrt(length(x))
}
function(consensus_df){
consensus <- consensus_df
df <- consensus %>% group_by(group, subject, condition) %>% summarise(mean = mean(cor_vec), se=std_error(cor_vec))
df$subject <- factor(df$subject, levels=levels(reorder(df$subject, df$mean)))
df$condition <- ifelse(df$condition == "Correct","Self-Congruent Target","Self-Incongruent Target")
# Plot
ggplot(df,aes(as.factor(subject),mean)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.3) +
geom_point(color='black',size=3) +
geom_point(aes(color=as.factor(condition)),size=2) +
scale_color_brewer(palette = "Dark2", name=element_blank()) +
theme_minimal() + #scale_y_continuous(breaks=seq(-.35,.50,.1)) +
theme(legend.position = 'bottom') +
labs(x = "Target ID", y= "correlation distance") +
facet_wrap(~group)
}
rr_plot <- function(consensus_df){
consensus <- consensus_df
df <- consensus %>% group_by(group, subject, condition) %>% summarise(mean = mean(cor_vec), se=std_error(cor_vec))
df$subject <- factor(df$subject, levels=levels(reorder(df$subject, df$mean)))
df$condition <- ifelse(df$condition == "Correct","Self-Congruent Target","Self-Incongruent Target")
# Plot
ggplot(df,aes(as.factor(subject),mean)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.3) +
geom_point(color='black',size=3) +
geom_point(aes(color=as.factor(condition)),size=2) +
scale_color_brewer(palette = "Dark2", name=element_blank()) +
theme_minimal() + #scale_y_continuous(breaks=seq(-.35,.50,.1)) +
theme(legend.position = 'bottom') +
labs(x = "Target ID", y= "correlation distance") +
facet_wrap(~group)
}
rr_plot(consensus_df)
rr_plot <- function(consensus_df){
consensus <- consensus_df
df <- consensus %>% group_by(group, subject, condition) %>% summarise(mean = mean(correlation), se=std_error(correlation))
df$subject <- factor(df$subject, levels=levels(reorder(df$subject, df$mean)))
df$condition <- ifelse(df$condition == "Correct","Self-Congruent Target","Self-Incongruent Target")
# Plot
ggplot(df,aes(as.factor(subject),mean)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.3) +
geom_point(color='black',size=3) +
geom_point(aes(color=as.factor(condition)),size=2) +
scale_color_brewer(palette = "Dark2", name=element_blank()) +
theme_minimal() + #scale_y_continuous(breaks=seq(-.35,.50,.1)) +
theme(legend.position = 'bottom') +
labs(x = "Target ID", y= "correlation distance") +
facet_wrap(~group)
}
rr_plot(consensus_df)
rr_plot <- function(consensus_df){
consensus <- consensus_df
df <- consensus %>% group_by(group, subject, condition) %>% summarise(mean = mean(correlation), se=std_error(correlation))
df$subject <- factor(df$subject, levels=levels(reorder(df$subject, df$mean)))
df$condition <- ifelse(df$condition == "congruent","Self-Congruent Target","Self-Incongruent Target")
# Plot
ggplot(df,aes(as.factor(subject),mean)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.3) +
geom_point(color='black',size=3) +
geom_point(aes(color=as.factor(condition)),size=2) +
scale_color_brewer(palette = "Dark2", name=element_blank()) +
theme_minimal() + #scale_y_continuous(breaks=seq(-.35,.50,.1)) +
theme(legend.position = 'bottom') +
labs(x = "Target ID", y= "correlation distance") +
facet_wrap(~group)
}
rr_plot(consensus_df)
rr_agg <- function(self, tar, groups, cor_meth ="spearman"){
s <- rr_selfonly %>%
filter(subject== self, target == self, group == groups) %>%
select(-group, -subject, -target) %>%
t
temp <- rr_noself_noNA %>%
filter(subject != self, target == tar, group == groups)  %>%
select(-group, -subject, -target)
agg_values <- apply(temp, 2, mean, na.rm=TRUE)
cv <- 1-cor(s[,1],agg_values, method = cor_meth)
return(cv)
}
rr_agg_all <- function(subs_df, cor_meth = "spearman"){
subs <- subs_df
# run function over
cor_vec <- vector()
for(i in 1:length(subs[,1])){
agg <- rr_agg(self = subs[i,2], tar = subs[i,3], groups = subs[i,1])
cor_vec <- c(cor_vec,agg)
}
consensus <- rr_df %>% select(group, subject, target)
consensus$correlation <- cor_vec
consensus$condition <- ifelse(rr_df$subject == rr_df$target, "congruent", "incongruent")
consensus$condition <- factor(consensus$condition, levels = c("congruent", "incongruent"))
consensus$congruent_corr <- ifelse(consensus$condition == "congruent",consensus$correlation,NA)
consensus$incongruent_corr <- ifelse(consensus$condition == "congruent",NA,consensus$correlation)
consensus$subject <- factor(consensus$subject, levels=levels(reorder(consensus$subject, -consensus$correlation)))
consensus_df <<- consensus
}
rr_df_maker <- function(fsl_zstats, subs_csv){
raw_zstats <<- read.table(fsl_zstats, quote="\"", comment.char="",skip = 3)
subs <<- read.csv(subs_csv)
rr_df <<- cbind(subs, raw_zstats)
rr_noself <<- rr_df
for(i in 1:length(rr_noself$subject)){
if(rr_noself[i,2] == rr_noself[i,3]){
rr_noself[i,] <-c(rr_noself[i,1], rr_noself[i,2], rr_noself[i,3],rep(NA, length(rr_noself[1,])-3))
}
}
rr_noself_noNA <<- rr_df %>% filter(subject != target)
rr_selfonly <<- rr_df %>% filter(subject == target)
}
#' Standard Error Calculator
#'
#' Calculates standard error of the mean for numeric vector.
#' @param x Numeric vector.
#' @param na.rm logical indicating removal of NAs before calculation.
#' @author Robert S. Chavez
#' @examples
#' x <- rnorm(100,100,15)
#' std_error(x)
std_error <- function (x, na.rm = FALSE)
{
if (na.rm)
x <- x[!is.na(x)]
sd(x)/sqrt(length(x))
}
rr_plot <- function(consensus_df){
consensus <- consensus_df
df <- consensus %>% group_by(group, subject, condition) %>% summarise(mean = mean(correlation), se=std_error(correlation))
df$subject <- factor(df$subject, levels=levels(reorder(df$subject, df$mean)))
df$condition <- ifelse(df$condition == "congruent","Self-Congruent Target","Self-Incongruent Target")
# Plot
ggplot(df,aes(as.factor(subject),mean)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.3) +
geom_point(color='black',size=3) +
geom_point(aes(color=as.factor(condition)),size=2) +
scale_color_brewer(palette = "Dark2", name=element_blank()) +
theme_minimal() + #scale_y_continuous(breaks=seq(-.35,.50,.1)) +
theme(legend.position = 'bottom') +
labs(x = "Target ID", y= "correlation distance") +
facet_wrap(~group)
}
rr_df_maker <- function(fsl_zstats, subs_csv){
raw_zstats <<- read.table(fsl_zstats, quote="\"", comment.char="",skip = 3)
subs <<- read.csv(subs_csv)
rr_df <<- cbind(subs, raw_zstats)
rr_noself <<- rr_df
for(i in 1:length(rr_noself$subject)){
if(rr_noself[i,2] == rr_noself[i,3]){
rr_noself[i,] <-c(rr_noself[i,1], rr_noself[i,2], rr_noself[i,3],rep(NA, length(rr_noself[1,])-3))
}
}
rr_noself_noNA <<- rr_df %>% filter(subject != target)
rr_selfonly <<- rr_df %>% filter(subject == target)
}
rr_agg <- function(self, tar, groups, cor_meth ="spearman"){
s <- rr_selfonly %>%
filter(subject== self, target == self, group == groups) %>%
select(-group, -subject, -target) %>%
t
temp <- rr_noself_noNA %>%
filter(subject != self, target == tar, group == groups)  %>%
select(-group, -subject, -target)
agg_values <- apply(temp, 2, mean, na.rm=TRUE)
cv <- 1-cor(s[,1],agg_values, method = cor_meth)
return(cv)
}
rr_agg_all <- function(subs_df, cor_meth = "spearman"){
subs <- subs_df
# run function over
cor_vec <- vector()
for(i in 1:length(subs[,1])){
agg <- rr_agg(self = subs[i,2], tar = subs[i,3], groups = subs[i,1])
cor_vec <- c(cor_vec,agg)
}
consensus <- rr_df %>% select(group, subject, target)
consensus$correlation <- cor_vec
consensus$condition <- ifelse(rr_df$subject == rr_df$target, "congruent", "incongruent")
consensus$condition <- factor(consensus$condition, levels = c("congruent", "incongruent"))
consensus$congruent_corr <- ifelse(consensus$condition == "congruent",consensus$correlation,NA)
consensus$incongruent_corr <- ifelse(consensus$condition == "congruent",NA,consensus$correlation)
consensus$subject <- factor(consensus$subject, levels=levels(reorder(consensus$subject, -consensus$correlation)))
consensus_df <<- consensus
}
x= "C:/Users/rober/Documents/neurodeb/shared/replication_analysis/replication_analysis/self_output2.txt"
y = "C:/Users/rober/Documents/neurodeb/shared/replication_analysis/replication_analysis//replication.csv"
rr_df_maker(x,y)
rr_agg_all(subs)
rr_plot()
rr_plot(consensus_df)
x= "C:/Users/rober/Documents/neurodeb/shared/replication_analysis/replication_analysis/self_output.txt"
y = "C:/Users/rober/Documents/neurodeb/shared/replication_analysis/replication_analysis//replication.csv"
rr_df_maker(x,y)
rr_agg_all(subs)
rr_plot(consensus_df)
y
View(subs)
subject <- c(rep(1,11),
rep(2,11),
rep(3,11),
rep(4,11),
rep(5,11),
rep(6,11),
rep(7,11),
rep(8,11),
rep(9,11),
rep(10,11),
rep(11,11))
target <- rep(1:11,11)
group <- rep(1,121)
df <- data_frame(group, subject, target)
df <- data.frame(group, subject, target)
write_csv("C:/Users/rober/Desktop/crap_test.csv")
write_csv(df, "C:/Users/rober/Desktop/crap_test.csv")
y = "C:/Users/rober/Desktop/crap_test.csv"
x= "C:/Users/rober/Google Drive/OSU/Studies/psychnet/data/meants_zstats_all_localizer"
rr_df_maker(x,y)
rr_agg_all(subs)
rr_plot(consensus_df)
library(roxygen2)
roxygenise()
library(devtools)
document()
library(csnl)
remove.packages("csnl", lib="~/R/win-library/3.5")
library(csnl)
library(csnl)
library(csnl)
roxygen2::roxygenise()
devtools::document()
library(csnl)
library(csnl)
roxygen2::roxygenise()
devtools::document()
library(csnl)
# Within subject design
x2 <- rnorm(100,100,15)
y2 <- sample(c("Group 1","Group 2"),100,TRUE)
z2 <- sample(c("Low","Med","High"),100,TRUE)
subject <- rep(1:5,20)
# No between subjects factors.
ggbarmaker(x2, y2, z2, id =subject)
# Grouping factor is between subjects.
ggbarmaker(x2,y2,z2, id =subject, groups_between=TRUE)
# qcor does a quick correlation with regression output and a plot
a <- rnorm(100,100,15)
b <- rnorm(100,90,15)
qcor(a,b)
x <- rnorm(100,100,15)
y <- sample(c("Group 1","Group 2"),100,TRUE)
p1 <- qplot(x)
p2 <- qplot(y)
multiplot(p1,p2)
library(csnl)
multiplot(p1,p2)
csnl::mulitplot()
csnl::multiplot(p1,p2)
roxygen2::roxygenise()
devtools::document()
library(csnl)
# multiplot allows you to put multiple ggplots side by side (cowplot might be better though)
x <- rnorm(100,100,15)
y <- sample(c("Group 1","Group 2"),100,TRUE)
p1 <- qplot(x)
p2 <- qplot(y)
multiplot(p1,p2)
roxygen2::roxygenise()
devtools::document()
library(csnl)
# multiplot allows you to put multiple ggplots side by side (cowplot might be better though)
x <- rnorm(100,100,15)
y <- sample(c("Group 1","Group 2"),100,TRUE)
p1 <- qplot(x)
p2 <- qplot(y)
multiplot(p1,p2)
roxygen2::roxygenize()
devtools::document()
library(csnl)
roxygen2::roxygenize()
devtools::document()
library(csnl)
library(csnl)
library(devtools)
library(roxygen2)
roxygenise()
document()
document()
roxygenise()
library(csnl)
remove.packages("csnl")
document()
roxygenise()
library(csnl)
remove.packages("csnl")
library(csnl)
devtools::document()
roxygen2::roxygenize()
devtools::document()
library(csnl)
